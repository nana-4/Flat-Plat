#!/bin/env bash
set -e
if [ $# -eq 0 ]; then
    echo "$0: missing argument"
    echo "Try '$0 --help' for more information."
    exit 1
fi
REPO_DIR=$(cd $(dirname $0) && 'pwd')
SRC_DIR=${REPO_DIR}/src
#Default installation directory
THEMES_DIR=/usr/share/themes
# List of supported gtk versions
gtk_ver=('3.18' '3.20' '3.22')
# List of supported gnome-shell versions
gs_ver=(3.18 3.20 3.22 3.24 3.26)
# Materia theme variants
color_variants=('' '-dark' '-light')
size_variants=('' '-compact')

usage() {
    printf "%s\n" "Usage: $0 install [OPTIONS...] [DEST-DIR]"
    printf "%s\n" "   or: $0 assets [ASSETS OPTIONS...]" 
    printf "%s\n" "   or: $0 render-assets [RENDERING OPTIONS]"
    printf "\n%s\n" "MANDATORY ARGUMENTS:"
    printf "  %-20s%s\n" "install" "Installing theme"
    printf "  %-20s%s\n" "assets" "Changing assets color"
    printf "  %-20s%s\n" "render-assets" "Rendering assets color" 
    printf "\n%s\n" "OPTIONS:"
    printf "  %-20s%s\n" "-c, --color" "Specify theme color variant (Default to ALL variants)"
    printf "  %-20s%s\n" "-s, --size" "Specify theme size variant (Default to ALL sizes)"
    printf "  %-20s%s\n" "-n, --name" "Specify theme name (Default to Materia-color-size)"
    printf "  %-20s%s\n" "-d, --dest" "Specify theme destination folder (Default to ~/.themes)"
    printf "  %-20s%s\n" "-h, --help" "Show this help"
    printf "  %-20s%s\n" "--fg" "Change theme color-fg"
    printf "  %-20s%s\n" "--bg" "Change theme base-bg e.g. main background.."
    printf "  %-20s%s\n" "--bg2" "Change theme lighter-bg-color e.g. menus,sidebars,buttons.."
    printf "  %-20s%s\n" "--bg3" "Change theme bg-color e.g. tabs,toolbars, statusbar..."
    printf "  %-20s%s\n" "--tfg" "Change theme titlebar-fg-color"
    printf "  %-20s%s\n" "--tbg" "Change theme titlebar-bg-color"
    printf "  %-20s%s\n" "--sfg" "Change theme selection-fg-color"
    printf "  %-20s%s\n" "--sbg" "Change theme selection-bg-color"
    printf "  %-20s%s\n" "--accent" "Change theme accent-color"
    printf "  %-20s%s\n" "--btn-fg" "Change theme buttons-fg-color"
    printf "\n%s\n" "ASSETS OPTIONS:"
    printf "  %-25s%s\n" "--fg" "Change assets color-fg"
    printf "  %-25s%s\n" "--fg-dark" "Change assets color-fg-dark"
    printf "  %-25s%s\n" "--bg" "Change assets color-bg"
    printf "  %-25s%s\n" "--bg-dark" "Change assets color-bg-dark"
    printf "  %-25s%s\n" "--bg-lighter" "Change assets color-bg-lighter"
    printf "  %-25s%s\n" "--bg-lighter-dark" "Change assets color-bg-lighter-dark"
    printf "  %-25s%s\n" "--base" "Change assets color-base"
    printf "  %-25s%s\n" "--base-dark" "Change assets color-base-dark"
    printf "  %-25s%s\n" "--accent" "Change assets color-accent"
    printf "\n%s\n" "RENDERING OPTIONS:"
    printf "  %-25s%s\n" "--gtk2" "Rendering GTK2 assets"
    printf "  %-25s%s\n" "--gtk3" "Rendering GTK3 assets"
    printf "\n" 
    printf "%s\n" "GENERAL INSTALLATION EXAMPLES:"
    printf "%s\n" "Install all theme variants with default name"
    printf "\t%s\t%s\n" "./materia install" 
    printf "%s\n" "Install all theme variants with different name"
    printf "\t%s\t%s\n" "./materia install -n mytheme"
    printf "%s\n" "Install one theme variant with both sizes"
    printf "\t%s\t%s\n" "./materia install --color dark"
    printf "\t%s\t%s\n" "./materia install --color light"
    printf "%s\n" "Install all compact variants"
    printf "\t%s\t%s\n" "./materia install --size compact"
    printf "%s\n" "Install only one specific theme variant"
    printf "\t%s\t%s\n" "./materia install --color light --size compact"
    printf "\t%s\t%s\n" "./materia install --color light --size compact -n mytheme"
    printf "\n%s\n" "CUSTOM INSTALLATION EXAMPLES:"
    printf "%s\n" "NOTES: - To install a custom theme --color [dark|light] is a mandatory option." 
    printf "%s\n" "       - Any color not specified will be set to default or autogenerated."
    printf "%s\n" "       - For best result specify --color dark for custom dark theme and --color light for custom light theme"
    printf "\n"
    printf "%s\n" "Install specific variant with custom bg-color"
    printf "\t%s\t%s\n" "./materia install --color dark --size compact --bg "#282828"" 
    printf "\t%s\t%s\n" "./materia install --color light --bg "#FFFFFF"" 
    printf "\t%s\t%s\n" "./materia install --color light --bg "#FFFFFF" --bg2 "#F5F5F5" --bg3 "#F2F2F2"" 
    printf "%s\n" "Install specific variant with custom bg, toolbar-bg, toolbar-fg colors"
    printf "\t%s\t%s\n" "./materia install --color dark --size compact --bg "#282828" --tbg "#d500f9" --tfg "#000000"" 
    printf "%s\n" "Install specific variant with custom bg, toolbar-bg, toolbar-fg and fg colors"
    printf "\t%s\t%s\n" "./materia install --color dark --size compact --bg "#282828" --tbg "#d500f9" --tfg "#000000" --fg "#f0f4c3"" 
    printf "%s\n" "Install specific variant with custom bg, toolbar-bg, toolbar-fg, fg and accent colors"
    printf "\t%s\t%s\n" "./materia install --color dark --size compact --bg "#282828" --tbg "#d500f9" --tfg "#000000" --fg "#f0f4c3" --accent "#536dfe"" 
    printf "%s\n" "And so on with other options.(more details changes will be added in the future)"
    printf "\n"
    printf "%s\n" "Install Materia solarized light version"
    printf "\t%s\t%s\n" " ./materia.sh install --color dark --size compact --bg "#fdf6e3" --bg2 "#eee8d5"  --fg "#657b83" --sbg "#eee8d5" --sfg "#268bd2" --accent "#6c71c4"  --tbg "#073642"  -n Materia-SolarizedLight" 
    printf "%s\n" "Install Materia solarized dark version"
    printf "\t%s\t%s\n" " ./materia.sh install --color dark --size compact --bg "#002b36" --bg2 "#073642"  --fg "#839496" --sbg "#073642" --sfg "#859900" --accent "#6c71c4"  --tbg "#073642"  -n Materia-SolarizedDark" 
    printf "\n%s\n" "CUSTOM ASSETS COLORS EXAMPLES:"
    printf "%s\n" "Follow these steps to change assets colors"
    printf "  %s\n" "1- Change assets color"
    printf "\t%s%s\n" "./materia --accent "#0000FF" --bg "#282828" --primary "#424242" ...."
    printf "  %s\n" "2- Render assets colors"
    printf "\t%s%s\n" "./materia render-assets"
    printf "  %s\n" "3- Replace the new assets folder with your theme assets folder"
    printf "%s\n"
    printf "%s\n" "NOTE:'$0' will create a backup of your assets.svg, assets folder and _colors.scss."
    printf "%s\n" "So you can revert back in case you messed up the colors."
    printf "%s\n" "--accent and --sfg with same color value cause invisible text on some buttons like rename button"

}
# Progress bar 
progress () {
    s=0.5;
    f=0.25;
    echo -ne "\r"
    while true; do
       sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[           ] [0%]."  \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[#          ] [10%]." \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[##         ] [20%]." \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[####       ] [30%]." \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[#####      ] [40%]." \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[######     ] [50%]." \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[#######    ] [60%]." \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[########   ] [70%]." \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[#########  ] [80%]." \
    && sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[########## ] [90%]." ; 
       sleep $f && s=`echo ${s} + ${f} + ${f} | bc` && echo -ne "\r\t\t\t\t\t[###########] [100%].";
    done
    echo -ne "\n"
}
# Get gnome-shell version
latest_gs_ver=${gs_ver[@]: -1}
if [[ $(which gnome-shell 2> /dev/null) ]]; then
    gnome_shell_ver=$(gnome-shell --version | cut -d ' ' -f 3 | cut -d . -f 1,2)
    for ver in "${gs_ver[@]}"; do
        if (( $(echo "$ver >= $gnome_shell_ver"|bc -l) )); then
            gnome_shell_ver=${ver}
            break
        elif (( $(echo "$gnome_shell_ver > $latest_gs_ver"|bc -l) )); then
            gnome_shell_ver=$latest_gs_ver
            break
        fi
    done
else
    gnome_shell_ver=3.18
fi
remove_materia () {
    #echo "Start removing Materia theme ..."
    if [ -d "${1}" ]; then
        rm -rf ${1}
    fi
    #find $HOME/.themes -iname "Materia*" -type d -exec rm -rf "{}" \+
    #echo "Materia theme successfully removed."
}
################### START Installing Materia Functions #######################
# Set theme name
set_theme_name () {
    if [[ "${iFlags[2]}" = "false" ]]; then
        theme_name=Materia$1$2
    elif [[ "${iFlags[0]}" == "true" && "${iFlags[1]}" == "true" && "${iFlags[2]}" == "true" ]]; then
        theme_name="${new_theme_name}"
    else
        theme_name="${new_theme_name}"$1$2
    fi
}
# Set specific theme variant(s) default to ALL
set_theme_variant () {
    if [ "${iFlags[0]}" == "false" -a "${iFlags[1]}" == "false" ]; then
        theme_color=("${color_variants[@]}")
        theme_size=("${size_variants[@]}")
    elif [ "${iFlags[0]}" == "true" -a "${iFlags[1]}" == "false" ]; then
        theme_color="$1"
        theme_size=("${size_variants[@]}")
    elif [ "${iFlags[0]}" == "false" -a "${iFlags[1]}" == "true" ]; then
        theme_color=("${color_variants[@]}")
        theme_size="$2"
    else
        theme_color="$1"
        theme_size="$2"
    fi
}
# Set GTK+ 2 gtkrc files 
set_gtk2_gtkrc () {
    gtkrc_file=${SRC_DIR}/gtk-2.0/gtkrc
    if [ "$1" == "" ]; then
        sed  -i "s/\(.*text_color:#\).[^n]*\(..base_color:#\).[^\"]*\"/\1212121\2FFFFFF\"/g" $gtkrc_file
        sed  -i "s/\(.*fg_color:#\).[^n]*\(..bg_color:#\).[^\"]*\"/\1212121\2F5F5F5\"/g" $gtkrc_file
        sed  -i "s/\(.*selected_fg_color:#\).[^n]*\(..selected_bg_color:#\).[^\"]*\"/\1FFFFFF\242A5F5\"/g" $gtkrc_file
        sed  -i "s/\(.*titlebar_fg_color:#\).[^n]*\(..titlebar_bg_color:#\).[^\"]*\"/\1FFFFFF\2455A64\"/g" $gtkrc_file
        sed  -i "s/\(.*link_color:#\).[^n]*\(..visited_link_color:#\).[^\"]*\"/\142A5F5\2E040FB\"/g" $gtkrc_file
    elif [ "$1" == "-light"  -a "$2" == "" ]; then
        sed  -i "s/\(.*text_color:#\).[^n]*\(..base_color:#\).[^\"]*\"/\1212121\2FFFFFF\"/g" $gtkrc_file
        sed  -i "s/\(.*fg_color:#\).[^n]*\(..bg_color:#\).[^\"]*\"/\1212121\2F5F5F5\"/g" $gtkrc_file
        sed  -i "s/\(.*selected_fg_color:#\).[^n]*\(..selected_bg_color:#\).[^\"]*\"/\1FFFFFF\242A5F5\"/g" $gtkrc_file
        sed  -i "s/\(.*titlebar_fg_color:#\).[^n]*\(..titlebar_bg_color:#\).[^\"]*\"/\1212121\2E0E0E0\"/g" $gtkrc_file
        sed  -i "s/\(.*link_color:#\).[^n]*\(..visited_link_color:#\).[^\"]*\"/\142A5F5\2E040FB\"/g" $gtkrc_file
    elif [ "$1" == "-dark"  -a "$2" == "" ]; then
        sed  -i "s/\(.*text_color:#\).[^n]*\(..base_color:#\).[^\"]*\"/\1FFFFFF\23B484E\"/g" $gtkrc_file
        sed  -i "s/\(.*fg_color:#\).[^n]*\(..bg_color:#\).[^\"]*\"/\1FFFFFF\2333E43\"/g" $gtkrc_file
        sed  -i "s/\(.*selected_fg_color:#\).[^n]*\(..selected_bg_color:#\).[^\"]*\"/\1FFFFFF\242A5F5\"/g" $gtkrc_file
        sed  -i "s/\(.*titlebar_fg_color:#\).[^n]*\(..titlebar_bg_color:#\).[^\"]*\"/\1FFFFFF\237474F\"/g" $gtkrc_file
        sed  -i "s/\(.*link_color:#\).[^n]*\(..visited_link_color:#\).[^\"]*\"/\142A5F5\2E040FB\"/g" $gtkrc_file
    fi
}
# Set GTK+ 3 gtk.scss & gtk-dark.scss files
set_gtk3_scss () {
    gtk_scss_dark_file=${SRC_DIR}/gtk-3.0/3.22/gtk-dark.scss
    gtk_scss_file=${SRC_DIR}/gtk-3.0/3.22/gtk.scss
    if [ "$1" == ""  -a "$2" == "" ]; then
        sed -i "1 c \\\$variant: 'light';" $gtk_scss_file
        sed -i "2 c \\\$titlebar: 'dark';" $gtk_scss_file
        sed -i "3 c \\\$compact: 'false';" $gtk_scss_file
        sed -i "1 c \\\$variant: 'dark';"  $gtk_scss_dark_file
        sed -i "2 c \\\$titlebar: 'dark';" $gtk_scss_dark_file
        sed -i "3 c \\\$compact: 'false';" $gtk_scss_dark_file
    elif [ "$1" == "-light"  -a "$2" == "" ]; then
        sed -i "1 c \\\$variant: 'light';"  $gtk_scss_file
        sed -i "2 c \\\$titlebar: 'light';" $gtk_scss_file
        sed -i "3 c \\\$compact: 'false';"  $gtk_scss_file
        sed -i "1 c \\\$variant: 'dark';"   $gtk_scss_dark_file
        sed -i "2 c \\\$titlebar: 'dark';"  $gtk_scss_dark_file
        sed -i "3 c \\\$compact: 'false';"  $gtk_scss_dark_file
    elif [ "$1" == "-dark"  -a "$2" == "" ]; then
        sed -i "1 c \\\$variant: 'dark';"  $gtk_scss_file
        sed -i "2 c \\\$titlebar: 'dark';" $gtk_scss_file
        sed -i "3 c \\\$compact: 'false';" $gtk_scss_file
    elif [ "$1" == "-light"  -a "$2" == "-compact" ]; then
        sed -i "1 c \\\$variant: 'light';"  $gtk_scss_file
        sed -i "2 c \\\$titlebar: 'light';" $gtk_scss_file
        sed -i "3 c \\\$compact: 'true';"   $gtk_scss_file
        sed -i "1 c \\\$variant: 'dark';"   $gtk_scss_dark_file
        sed -i "2 c \\\$titlebar: 'dark';"  $gtk_scss_dark_file
        sed -i "3 c \\\$compact: 'true';"   $gtk_scss_dark_file
    elif [ "$1" == "-dark"  -a "$2" == "-compact" ]; then
        sed -i "1 c \\\$variant: 'dark';"  $gtk_scss_file
        sed -i "2 c \\\$titlebar: 'dark';" $gtk_scss_file
        sed -i "3 c \\\$compact: 'true';"  $gtk_scss_file
    elif [ "$1" == ""  -a "$2" == "-compact" ]; then
        sed -i "1 c \\\$variant: 'light';" $gtk_scss_file
        sed -i "2 c \\\$titlebar: 'dark';" $gtk_scss_file
        sed -i "3 c \\\$compact: 'true';"  $gtk_scss_file
        sed -i "1 c \\\$variant: 'dark';"  $gtk_scss_dark_file
        sed -i "2 c \\\$titlebar: 'dark';" $gtk_scss_dark_file
        sed -i "3 c \\\$compact: 'true';" $gtk_scss_dark_file
    fi
}
# Set gnome_shell .scss files 
set_gnome_shell_scss () {
    cp ${gtk_scss_file} ${SRC_DIR}/gnome-shell/3.26/gnome-shell.scss
    gs_scss_file=${SRC_DIR}/gnome-shell/3.26/gnome-shell.scss
    sed -i "9,10 c @import 'sass/extensions';" ${gs_scss_file}
}
# Validate theme variant  
is_valid_variant () {
    if [[ ! " ${color_variants[@]} " =~ " $1 " ]]; then
        echo "ERROR: Unsupported color variant '"${1:1}"'."
        echo "Try '$0 --help' for more inforamtion."
        exit 1
    fi
}
# Validate theme size 
is_valid_size () {
    if [[ ! " ${size_variants[@]} " =~ " $1 " ]]; then
        echo "ERROR: Unsupported size variant '"${1:1}"'."
        echo "Try '$0 --help' for more inforamtion."
        exit 1
    fi
}
# Validate color: only accept color in hex format e.g. "#212121"
# TODO: Add support to Material colors that are defined in sass/_colors-palette.scss
re_hexcolor='^#[0-9a-fA-F]{6}$'
is_valid_color () {
    if [[ -z "${2}" ]]; then
        echo "ERROR: '${1} \"${2}\"', color cannot be empty."
        exit 1
    elif [[ ! "${2}" =~ $re_hexcolor ]]; then
        echo "ERROR: '${1} \"${2}\"', color must be in hex format e.g. "#ffffff". "
        exit 1
    fi
}
# Install index.theme 
install_index_theme () {
    cp -ur ${SRC_DIR}/index.theme "${2}"
    sed -i "s/Materia\$/"${1}"/g" "${2}"/index.theme
    #echo "index.theme succussfully installed"
}
# Install gnome-shell theme 
install_gnome_shell () {
    gs_src_dir=${SRC_DIR}/gnome-shell/${gnome_shell_ver}
    gs_dst_dir="${3}/gnome-shell"
    install -d "${gs_dst_dir}"
    cp -ur ${gs_src_dir}/*.svg ${gs_dst_dir}
    cp -urL ${gs_src_dir}/{extensions,pad-osd.css} ${gs_dst_dir}
    if [ "${1}" != "-dark" ]; then
        cp -urL ${gs_src_dir}/assets ${gs_dst_dir}
    else
        cp -urL ${gs_src_dir}/assets-dark ${gs_dst_dir}/assets
    fi
    # Compile .scss files to .css files 
    set_gnome_shell_scss
    sassc "${gs_scss_file}" "${gs_dst_dir}/gnome-shell.css"
    # Create a binary resource bundle from .gresource.xml
    glib-compile-resources --sourcedir=${gs_dst_dir} \
        --target=${gs_dst_dir}/gnome-shell-theme.gresource \
        ${gs_src_dir}/gnome-shell-theme.gresource.xml
    #echo "Finished installing gnome-shell."
}
# Install GTK+ 2 theme
install_gtk2_theme () {
    install -d "${3}/gtk-2.0"
    local gtk2_hidpi=$(echo ${GTK2_HIDPI-False} | tr '[:upper:]' '[:lower:]')
    local hidpi_option=""
    if [ "gtk2_hidpi" == "true" ]; then
        cp -ur ${SRC_DIR}/gtk-2.0/main.rc.hidpi ${3}/gtk-2.0/main.rc
    else
        cp -ur ${SRC_DIR}/gtk-2.0/main.rc ${3}/gtk-2.0/main.rc
    fi
    set_gtk2_gtkrc "${1}"
    cp -ur ${SRC_DIR}/gtk-2.0/{apps,hacks}.rc ${3}/gtk-2.0
    cp -ur ${SRC_DIR}/gtk-2.0/gtkrc ${3}/gtk-2.0/gtkrc
    if [ "${1}" == "-dark" ]; then
        cp -ur ${SRC_DIR}/gtk-2.0/assets${1} ${3}/gtk-2.0/assets
    else
        cp -ur ${SRC_DIR}/gtk-2.0/assets ${3}/gtk-2.0
    fi
    #echo "Finished installing GTK+ 2 theme."
}
# Install GTK+ 3 theme 
install_gtk3_theme () {
    install -d "${3}/gtk-common"
    cp -ur ${SRC_DIR}/gtk-3.0/gtk-common/assets ${3}/gtk-common
    set_gtk3_scss "${1}" "${2}"
    for ver in "${gtk_ver[@]}"; do 
        if [ "${ver}"  == "3.18" ]; then
            install -d "${3}/gtk-3.0"
            cp -ur ${SRC_DIR}/gtk-3.0/${ver}/assets ${3}/gtk-3.0
            sassc "${SRC_DIR}/gtk-3.0/${ver}/gtk.scss" "${3}/gtk-3.0/gtk.css" #2>/dev/null
            if [ "${1}" != "-dark" ]; then
                sassc "${SRC_DIR}/gtk-3.0/${ver}/gtk-dark.scss" "${3}/gtk-3.0/gtk-drak.css" #2>/dev/null
            fi
        else
            install -d "${3}/gtk-${ver}"
            cp -ur ${SRC_DIR}/gtk-3.0/${ver}/assets ${3}/gtk-${ver}
            sassc "${SRC_DIR}/gtk-3.0/${ver}/gtk.scss" "${3}/gtk-${ver}/gtk.css" #2>/dev/null
            if [ "${1}" != "-dark" ]; then
                sassc "${SRC_DIR}/gtk-3.0/${ver}/gtk-dark.scss" "${3}/gtk-${ver}/gtk-drak.css" #2>/dev/null
            fi
        fi
    done
    #echo "Finished installing GTK+ 3 theme."
}
# Installing Metacity theme
install_metacity_theme () {
    install -d "${3}/metacity-1"
    cp -ur ${SRC_DIR}/metacity-1/assets ${3}/metacity-1 
    if [ "${1}" != "-light" ]; then
        cp -ur ${SRC_DIR}/metacity-1/metacity-theme-{2,3}.xml ${3}/metacity-1 
    else
        cp -ur ${SRC_DIR}/metacity-1/metacity-theme-2${1}.xml ${3}/metacity-1/metacity-theme-2.xml 
        cp -ur ${SRC_DIR}/metacity-1/metacity-theme-3${1}.xml ${3}/metacity-1/metacity-theme-3.xml 
    fi
    #echo "Finished installing Metacity theme."
}
# Installing Unity theme
install_unity_theme () {
    install -d "${3}/unity"
    cp -ur ${SRC_DIR}/unity/*.{svg,png,json} ${3}/unity
    if [ "${1}" != "-light" ]; then
        cp -ur ${SRC_DIR}/unity/assets ${3}/unity 
    else
        cp -urT ${SRC_DIR}/unity/assets${1} ${3}/unity/assets 
    fi
    #echo "Finished installing Unity theme."
}
# Installing Xfwm theme
install_xfwm_theme () {
    install -d ${3}/xfwm4
    cp -ur ${SRC_DIR}/xfwm4/{*.svg,themerc} ${3}/xfwm4
    if [ "${1}" != "-light" ]; then
        cp -ur ${SRC_DIR}/xfwm4/assets ${3}/xfwm4 
    else
        cp -urT ${SRC_DIR}/xfwm4/assets${1} ${3}/xfwm4/assets 
    fi
    #echo "Finished installing Xfwm4 theme."

}
# By default Materia will install all color variants and sizes
# Main function
install_materia () {
    for color in "${theme_color[@]}"; do 
        for size in "${theme_size[@]}"; do
            set_theme_name ${color} ${size}
            theme_dir=${1:-${THEMES_DIR}}/${theme_name}
            remove_materia "${theme_name}"
            install -d "${theme_dir}"
            cp -ur ${REPO_DIR}/COPYING ${theme_dir}
            printf "%s\n" "Installing $theme_name ... " 
            install_index_theme "${theme_name}" "${theme_dir}"
            install_gtk2_theme "${color}" "${size}" "${theme_dir}"
            install_gtk3_theme "${color}" "${size}" "${theme_dir}"
            install_gnome_shell "${color}" "${size}" "${theme_dir}" "${theme_name}"
            install_metacity_theme "${color}" "${size}" "${theme_dir}"
            install_unity_theme "${color}" "${size}" "${theme_dir}"
            install_xfwm_theme "${color}" "${size}" "${theme_dir}"
       done
   done
}
######################## END Installing Materia Functions ###########################

######################## START Materia Customization Functions ######################
# This section includes all functions that do the following:                        #
#       1- customize theme colors                                                   #
#       2- customize theme assets                                                   # 
##################################################################################### 
# Get old asset color 
get_old_asset_color () {
    old_color="$(sed -n "/<linearGradient.id=\"${1}\">/{n;s/.*<stop.stop-color=\"\(#.[^\"]*\).[^>]*>/\1/p}" ${SRC_DIR}/gtk-3.0/gtk-common/assets.svg)"
}
# Get old assets colors
get_old_assets_color () {
    get_old_asset_color "color-fg"
    old_color_fg="${old_color}"
    get_old_asset_color "color-fg-dark"
    old_color_fg_dark="${old_color}"
    get_old_asset_color "color-fg-secondary"
    old_color_fg_secondary="$old_color"
    get_old_asset_color "color-fg-secondary-dark"
    old_color_fg_secondary_dark="$old_color"
    get_old_asset_color "color-fg-secondary-disabled"
    old_color_fg_secondary_disabled="$old_color"
    old_color_fg_disabled="$old_color" 
    get_old_asset_color "color-fg-secondary-disabled-dark"
    old_color_fg_secondary_disabled_dark="$old_color"
    get_old_asset_color "color-bg"
    old_color_bg="$old_color"
    get_old_asset_color "color-bg-dark"
    old_color_bg_dark="$old_color"
    get_old_asset_color "color-bg-lighter"
    old_color_bg_lighter="$old_color"
    old_color_base_alt="$old_color"
    get_old_asset_color "color-bg-lighter-dark"
    old_color_bg_lighter_dark="$old_color"
    get_old_asset_color "color-base"
    old_color_base="$old_color"
    get_old_asset_color "color-base-dark"
    old_color_base_dark="$old_color"
    get_old_asset_color "color-divider"
    old_color_divider="$old_color"
    old_color_border="$old_color"
    get_old_asset_color "color-divider-dark"
    old_color_divider_dark="$old_color"
    get_old_asset_color "color-accent"
    old_color_accent="$old_color"
    get_old_asset_color "color-accent-disabled"
    old_color_accent_disabled="$old_color"
    old_color_accent_insensitive="$old_color"
    old_color_primary="$(sed -n "/<linearGradient.id=\"color-primary\">/{n;s/.*<stop.stop-color=\"\(#.[^\"]*\).[^>]*>/\1/p}" ${SRC_DIR}/gtk-2.0/assets.svg)"
}
# Change asset color 
change_asset_color () {
    sed -i "/\"${1}\"/{n;s/\(.*stop-color=\"\).[^\"]*/\1${2}/g}" ${SRC_DIR}/gtk-3.0/gtk-common/assets.svg
    sed -i "/\"${1}\"/{n;s/\(.*stop-color=\"\).[^\"]*/\1${2}/g}" ${SRC_DIR}/gtk-2.0/assets.svg 
}
# Change assets colors 
change_assets_color () {
    gtk_common_dir="${SRC_DIR}/gtk-3.0/gtk-common"
    if [ ! -f "${gtk_common_dir}/assets_original.svg" ]; then
        cp ${gtk_common_dir}/assets.svg ${gtk_common_dir}/assets_original.svg
    fi
    get_old_assets_color
    if [ "${aFlags[0]}" == "true" -a "${old_color_fg}" != "color_fg" ]; then
        change_asset_color "color-fg" "${color_fg}"
        change_asset_color "color-fg-secondary" "${color_fg}"
        change_asset_color "color-fg-secondary-disabled" "${color_fg}"
        change_asset_color "color-divider" "${color_fg}"
        change_asset_color "color-fg-disabled" "${color_fg}" #gtk2
        change_asset_color "color-border" "${color_fg}" #gtk2
    fi
    if [ "${aFlags[1]}" == "true" -a "${old_color_fg_dark}" != "color_fg_dark" ]; then
        change_asset_color "color-fg-dark" "${color_fg_dark}"
        change_asset_color "color-fg-secondary-dark" "${color_fg_dark}"
        change_asset_color "color-fg-secondary-disabled-dark" "${color_fg_dark}"
        change_asset_color "color-divider-dark" "${color_divider_dark}"
    fi
    if [ "${aFlags[2]}" == "true" -a "${old_color_bg}" != "color_bg" ]; then
        change_asset_color "color-bg" "${color_bg}"
    fi
    if [ "${aFlags[3]}" == "true" -a "${old_color_bg_dark}" != "color_bg_dark" ]; then
        change_asset_color "color-bg-dark" "${color_bg_dark}"
    fi
    if [ "${aFlags[4]}" == "true" -a "${old_color_bg_lighter}" != "color_bg_lighter" ]; then
        change_asset_color "color-bg-lighter" "${color_bg_lighter}"
        change_asset_color "color-base-alt" "${color_bg_lighter}"
    fi
    if [ "${aFlags[5]}" == "true" -a "${old_color_bg_lighter_dark}" != "color_bg_lighter_dark" ]; then
        change_asset_color "color-bg-lighter-dark" "${color_bg_lighter_dark}"
    fi
    if [ "${aFlags[6]}" == "true" -a "${old_color_base}" != "color_base" ]; then
        change_asset_color "color-base" "${color_base}"
    fi
    if [ "${aFlags[7]}" == "true" -a "${old_color_base_dark}" != "color_base_dark" ]; then
        change_asset_color "color-base-dark" "${color_base_dark}"
    fi
    if [ "${aFlags[8]}" == "true" -a "${old_color_accent}" != "color_accent" ]; then
        change_asset_color "color-accent" "${color_accent}"
        change_asset_color "color-accent-disabled" "${color_accent}"
        change_asset_color "color-accent-insensitive" "${color_accent}" #gtk2
    fi
    if [ "${aFlags[9]}" == "true" -a "${old_color_primary}" != "color_primary" ]; then
        change_asset_color "color-primary" "${color_primary}"
    fi
    print_assets_summary
    echo 
    echo "Assets color successfully changed, run '${0} render-assets' to generate new assets."
    #exit 1 enable this to test assets color changes
}
# Render GTK+ 2 asset
render_asset_gtk2 () {
    local assets_src_file=${1}
    local assets_dir=${2}
    local asset_name=${3}
    local gtk2_hidpi=$(echo ${GTK2_HIDPI-False} | tr '[:upper:]' '[:lower:]')
    local hidpi_option=""
    if [ "gtk2_hidpi" == "true" ]; then
        hidpi_option="--export-dpi=192"
    fi
    INKSCAPE=$(which inkscape)
    OPTIPNG=$(which optipng)
    
    if [ -f ${assets_dir}/${asset_name}.png ]; then
        echo "assets/${asset_name}.png exists."
    else
        echo Rendering assets/${asset_name}.png
        $INKSCAPE --export-id=${asset_name} --export-id-only ${hidpi_option} \
                  --export-background-opacity=0 \
                  --export-png="${assets_dir}/${asset_name}.png" ${assets_src_file} >/dev/null \
        && $OPTIPNG -o7 --quiet ${assets_dir}/${asset_name}.png
    fi
}
# Render GTK+ 3 asset
render_asset_gtk3 () {
    local assets_src_file=${1}
    local assets_dir=${2}
    local asset_name=${3}
    INKSCAPE=$(which inkscape)
    OPTIPNG=$(which optipng)
    
    if [ -f ${assets_dir}/${asset_name}.png ]; then
        echo "assets/${asset_name}.png exists."
    else
        echo Rendering assets/${asset_name}.png
        $INKSCAPE --export-id=${asset_name} --export-id-only \
                  --export-png="${assets_dir}/${asset_name}.png" ${assets_src_file} >/dev/null \
        && $OPTIPNG -o7 --quiet ${assets_dir}/${asset_name}.png
    fi
    if [ -f ${assets_dir}/${asset_name}@2.png ]; then
        echo "assets/${asset_name}@2.png exists."
    else
        echo Rendering assets/${asset_name}@2.png
        $INKSCAPE --export-id=${asset_name} --export-id-only --export-dpi=192 \
                  --export-png="${assets_dir}/${asset_name}@2.png" ${assets_src_file} >/dev/null \
        && $OPTIPNG -o7 --quiet ${assets_dir}/${asset_name}@2.png
    fi
}
# Render assets
# Main rendering function
render_assets () {
    if [ "$1" == "gtk3" ]; then
        if [ ! -d "$SRC_DIR/gtk-3.0/gtk-common/assets" ]; then
            mkdir -p "${SRC_DIR}/gtk-3.0/gtk-common/assets"
            cp -ur "${SRC_DIR}/gtk-3.0/gtk-common/assets_original/scalable" "${SRC_DIR}/gtk-3.0/gtk-common/assets/scalable"
        elif [ ! -d "$SRC_DIR/gtk-3.0/gtk-common/assets_original" ]; then
            mv "$SRC_DIR/gtk-3.0/gtk-common/assets" "$SRC_DIR/gtk-3.0/gtk-common/assets_original"
        fi
        local assets_src_file="${SRC_DIR}/gtk-3.0/gtk-common/assets.svg"
        local assets_dir="${SRC_DIR}/gtk-3.0/gtk-common/assets"
        local assets_index="${SRC_DIR}/gtk-3.0/gtk-common/assets.txt"
    elif [ "$1" == "gtk2" ]; then
        if [ ! -d "$SRC_DIR/gtk-2.0/assets" ]; then
            mkdir -p "${SRC_DIR}/gtk-2.0/assets"
        elif [ ! -d "$SRC_DIR/gtk-2.0/assets_original" ]; then
            mv "$SRC_DIR/gtk-2.0/assets" "$SRC_DIR/gtk-2.0/assets_original"
        fi
        mkdir -p "${SRC_DIR}/gtk-2.0/assets"
        local assets_src_file="${SRC_DIR}/gtk-2.0/assets.svg"
        local assets_dir="${SRC_DIR}/gtk-2.0/assets"
        local assets_index="${SRC_DIR}/gtk-2.0/assets.txt"
    fi
    #install -d ${assets_dir}
    if [[ $(which parallel 2>/dev/null) ]]; then
        printf "\n%s\n\n" "Start rendering ${1} assets..."
        export -f render_asset_${1}
        parallel --load 85% --noswap -a ${assets_index} render_asset_${1} ${assets_src_file} ${assets_dir} 
        unset -f render_asset_${1}
        printf "\n%s\n\n" "Finished rendering ${1} assets."
    else
        printf "\n%s\n" "We recommend installing 'parallel' for faster rendering"
        printf "%s\n" "Start rendering ${1} assets ..."
        while read i; do 
            render_asset_${1} ${assets_src_file} ${assets_dir} "${i}"
        done < ${assets_index}
        printf "\n%s\n\n" "We recommend installing 'parallel' for faster rendering"
        printf "%s\n" "Finished rendering ${1} assets ..."
    fi
}
# Print summary of changes
print_assets_summary () {
    printf "%-25s%-10s%-10s%-8s\n" "ASSETS COLOR" "OLD COLOR" "NEW COLOR" "OPACITY"
    printf "%-25s%-10s%-10s%-8s\n" "color-fg" "${old_color_fg}" "${color_fg}" "0.78"
    printf "%-25s%-10s%-10s%-8s\n" "color-fg-dark" "${old_color_fg_dark}" "$color_fg_dark" "1.0" 
    printf "%-25s%-10s%-10s%-8s\n" "color-fg2" "${old_color_fg_secondary}" "$color_fg" "0.54"
    printf "%-25s%-10s%-10s%-8s\n" "color-fg2-dark" "${old_color_fg_secondary_dark}" "$color_fg_dark" "0.7"
    printf "%-25s%-10s%-10s%-8s\n" "color-fg2-disabled" "${old_color_fg_secondary_disabled}" "$color_fg" "0.26"
    printf "%-25s%-10s%-10s%-8s\n" "color-fg2-disabled-dark" "${old_color_fg_secondary_disabled_dark}" "$color_fg_dark" "0.3"
    printf "%-25s%-10s%-10s%-8s\n" "color-bg" "${old_color_bg}" "${color_bg}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-bg-dark" "${old_color_bg_dark}" "${color_bg_dark}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-bg-lighter" "${old_color_bg_lighter}" "${color_bg_lighter}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-bg-lighter-dark" "${old_color_bg_lighter_dark}" "${color_bg_lighter_dark}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-base" "${old_color_base}" "${color_bg_base}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-base-dark" "${old_color_base_dark}" "${color_base_dark}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-divider" "${old_color_divider}" "${color_fg}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-divider-dark" "${old_color_divider_dark}" "${color_fg_dark}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-accent" "${old_color_accent}" "${color_accent}" "1.0"
    printf "%-25s%-10s%-10s%-8s\n" "color-accent-disabled" "${old_color_accent_disabled}" "${color_accent}" "0.5"
    printf "%-25s%-10s%-10s%-8s\n" "color-primary" "${old_color_primary}" "${color_primary}" "1.0"
}
# Function to Customize original theme coloring
# All changes based on sass/_colors.scss file
change_colors_scss () {
    gtk3_sass_dir=${SRC_DIR}/gtk-3.0/3.22/sass
    gs_sass_dir=${SRC_DIR}/gnome-shell/3.18/sass
    gtk2_dir=${SRC_DIR}/gtk-2.0
    gtkrc_file=${gtk2_dir}/gtkrc
    if [ ! -f "${gtk3_sass_dir}/_colors-original.scss"  ]; then
        cp ${gtk3_sass_dir}/_colors.scss ${gtk3_sass_dir}/_colors-original.scss
    else
        cp ${gtk3_sass_dir}/_colors-original.scss ${gtk3_sass_dir}/_colors.scss
    fi
    if [ ! -f "${gs_sass_dir}/_colors-original.scss"  ]; then
        cp ${gs_sass_dir}/_colors.scss ${gs_sass_dir}/_colors-original.scss
    else
        cp ${gs_sass_dir}/_colors-original.scss ${gs_sass_dir}/_colors.scss
    fi
    if [ ! -f "${gtk2_dir}/gtkrc-original"  ]; then
        cp ${gtkrc_file} ${gtk2_dir}/gtkrc-original
    else
        cp ${gtk2_dir}/gtkrc-original ${gtk2_dir}/gtkrc
    fi
    colors_scss_files=("${gtk3_sass_dir}/_colors.scss" "${gs_sass_dir}/_colors.scss")
    #change gtk3 colors
    for colors_scss_file in "${colors_scss_files[@]}"; do
        if [ "${color}" == "-dark" ]; then
            if [ "${iFlags[4]}" == "true" ]; then
                sed -i "s/\(\\\$fg_color:.[^)]*), \).[^)]*/\1${fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$secondary_fg_color:.[^)]*), rgba(\).[^,]*/\1${fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$hint_fg_color:.[^)]*), rgba(\).[^,]*/\1${fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$disabled_fg_color:.[^)]*), rgba(\).[^,]*/\1${fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$disabled_secondary_fg_color:.[^)]*), rgba(\).[^,]*/\1${fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$track_color:.[^)]*), rgba(\).[^,]*/\1${fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$divider_color:.[^)]*), rgba(\).[^,]*/\1${fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$light_fg_color: \).[^;]*/\1${fg_color}/g" ${colors_scss_file}
            fi
            if [ "${iFlags[9]}" == "true" ]; then
                sed -i "s/\(\\\$titlebar_fg_color:.[^)]*), \).[^)]*/\1${tb_fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_secondary_fg_color:.[^)]*), rgba(\).[^,]*/\1${tb_fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_hint_fg_color:.[^)]*), rgba(\).[^,]*/\1${tb_fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_disabled_fg_color:.[^)]*), rgba(\).[^,]*/\1${tb_fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_disabled_secondary_fg_color:.[^)]*), rgba(\).[^,]*/\1${tb_fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_track_color:.[^)]*), rgba(\).[^,]*/\1${tb_fg_color}/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_divider_color:.[^)]*), rgba(\).[^,]*/\1${tb_fg_color}/g" ${colors_scss_file}
            fi
            if [ "${iFlags[13]}" == "true" ]; then
                sed -i "s/\(\\\$button_fg_color:.[^,]*,.[^,]*,[^,]*, rgba(\).[^,]*\(.[^;]\)/\1${btn_fg_color}\2/g" ${colors_scss_file}
            elif [ "${iFlags[4]}" == "true" ]; then
                sed -i "s/\(\\\$button_fg_color:.[^,]*,.[^,]*,[^,]*, rgba(\).[^,]*\(.[^;]\)/\1${fg_color}\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[5]}" == "true" ]; then
                sed -i "s/\(\\\$base_color:.[^,]*.[^,]*, \).[^;]*\()\)/\1${base_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$alt_base_color:.[^,]*.[^,]*, \).[^;]*\()\)/\1lighten(${base_color}, 3%)\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[6]}" == "true" -a "${colors_scss_file}" == "${colors_scss_files[0]}" ]; then
                sed -i "s/\(\\\$lighter_bg_color:.[^,]*.[^,]*, \).[^;]*\()\)/\1${lighter_bg_color}\2/g" ${colors_scss_file}
            elif [ "${iFlags[5]}" == "true" ]; then
                sed -i "s/\(\\\$lighter_bg_color:.[^,]*.[^,]*, \).[^;]*\()\)/\1lighten(${base_color}, 3%)\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[7]}" == "true" -a "${colors_scss_file}" == "${colors_scss_files[0]}" ]; then
                sed -i "s/\(\\\$bg_color:.[^,]*.[^,]*, \).[^;]*\()\)/\1${bg_color}\2/g" ${colors_scss_file}
            elif [ "${iFlags[5]}" == "true" -a "${colors_scss_file}" == "${colors_scss_files[0]}" ]; then
                sed -i "s/\(\\\$bg_color:.[^,]*.[^,]*, \).[^;]*\()\)/\1lighten(${base_color}, 2%)\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[8]}" == "true" ]; then
                sed -i "s/\(\\\$titlebar_bg_color:.[^,]*, \).[^,]*.[^,]*.[^,]*\(.[^;]\)/\1${tb_bg_color}\2/g" ${colors_scss_file}
            fi
        else
            if [ "${iFlags[4]}" == "true" ]; then
                sed -i "s/\(\\\$fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$secondary_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$hint_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$disabled_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$disabled_secondary_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$track_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$divider_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$dark_fg_color:.*rgba(\).[^,]*\(.[^;]*\)/\1${fg_color}\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[9]}" == "true" ]; then
                sed -i "s/\(\\\$titlebar_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${tb_fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_secondary_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${tb_fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_hint_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${tb_fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_disabled_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${tb_fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_disabled_secondary_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${tb_fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_track_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${tb_fg_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$titlebar_divider_color:.[^,]*, rgba(\).[^,]*\(.[^;]*\)/\1${tb_fg_color}\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[13]}" == "true" ]; then
                sed -i "s/\(\\\$button_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]\)/\1${btn_fg_color}\2/g" ${colors_scss_file}
            elif [ "${iFlags[4]}" == "true" ]; then
                sed -i "s/\(\\\$button_fg_color:.[^,]*, rgba(\).[^,]*\(.[^;]\)/\1${fg_color}\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[5]}" == "true" -a "${colors_scss_file}" == "${colors_scss_files[0]}" ]; then
                sed -i "s/\(\\\$base_color:.[^,]*, \).[^,]*\(.[^;]*\)/\1${base_color}\2/g" ${colors_scss_file}
                sed -i "s/\(\\\$alt_base_color:.[^,]*, \).[^,]*\(.[^;]*\)/\1darken(${base_color}, 3%)\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[6]}" == "true" ]; then
                sed -i "s/\(\\\$lighter_bg_color:.[^,]*, \).[^,]*\(.[^;]*\)/\1${lighter_bg_color}\2/g" ${colors_scss_file}
            elif [ "${iFlags[5]}" == "true" ]; then
                sed -i "s/\(\\\$lighter_bg_color:.[^,]*, \).[^,]*\(.[^;]*\)/\1darken(${base_color}, 3%)\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[7]}" == "true" -a "${colors_scss_file}" == "${colors_scss_files[0]}" ]; then
                sed -i "s/\(\\\$bg_color:.[^,]*, \).[^,]*\(.[^;]*\)/\1${bg_color}\2/g" ${colors_scss_file}
            elif [ "${iFlags[5]}" == "true" -a "${colors_scss_file}" == "${colors_scss_files[0]}" ]; then
                sed -i "s/\(\\\$bg_color:.[^,]*, \).[^,]*\(.[^;]*\)/\1darken(${base_color}, 6%)\2/g" ${colors_scss_file}
            fi
            if [ "${iFlags[8]}" == "true" ]; then
                sed -i "s/\(\\\$titlebar_bg_color:.[^,]*, if.[^)]*), \).[^)]*\();\)/\1${tb_bg_color}\2/g" ${colors_scss_file}
            fi
        fi
        #gnome-shell colors shared by all variants 
        if [ "${iFlags[6]}" == "true" -a "${colors_scss_file}" == "${colors_scss_files[1]}" ]; then
            sed -i "s/\(\\\$bg_color:.*rgba(\).[^,]*\(.[^;]*\)/\1${lighter_bg_color}\2/g" ${colors_scss_file}
            sed -i "s/\(\\\$alt_bg_color:.*rgba(\).[^,]*\(.[^;]*\)/\1${lighter_bg_color}\2/g" ${colors_scss_file}
        elif [ "${iFlags[5]}" == "true" -a "${colors_scss_file}" == "${colors_scss_files[1]}" ]; then
            sed -i "s/\(\\\$bg_color:.*rgba(\).[^,]*\(.[^;]*\)/\1lighten(${base_color}, 3%)\2/g" ${colors_scss_file}
            sed -i "s/\(\\\$alt_bg_color:.*rgba(\).[^,]*\(.[^;]*\)/\1lighten(${base_color}, 3%)\2/g" ${colors_scss_file}
        fi
        # common-colors for all variants
        if [ "${iFlags[10]}" == "true" ]; then
            sed -i "s/\(\\\$inverse_fg_color: \).[^;]*/\1${sfg_color}/g" ${colors_scss_file}
            sed -i "s/\(\\\$inverse_secondary_fg_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" ${colors_scss_file}
            sed -i "s/\(\\\$inverse_hint_fg_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" ${colors_scss_file}
            sed -i "s/\(\\\$inverse_disabled_fg_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" ${colors_scss_file}
            sed -i "s/\(\\\$inverse_disabled_secondary_fg_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" ${colors_scss_file}
            sed -i "s/\(\\\$inverse_track_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" ${colors_scss_file}
            sed -i "s/\(\\\$inverse_divider_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" ${colors_scss_file}
        fi
        if [ "${iFlags[11]}" == "true" ]; then
            sed -i "s/\(\\\$primary_color: \).[^;]*/\1${sbg_color}/g" ${colors_scss_file}
            sed -i "s/\(\\\$alt_primary_color: \).[^;]*/\1rgba(${sbg_color}, 0.5)/g" ${colors_scss_file}
        fi
        if [ "${iFlags[12]}" == "true" ]; then
            sed -i "s/\(\\\$accent_color: \).[^;]*/\1${accent_color}/g" ${colors_scss_file}
        fi
    done
    #change gtk2 colors
    if [ "${iFlags[4]}" == "true" ]; then
        sed -i "s/\(.*text_color:\).[^\]*\(.[^\"]*\"\)/\1${fg_color}\2/g" $gtkrc_file
        sed -i "s/\(.*fg_color:\).[^\]*\(.[^\"]*\"\)/\1${fg_color}\2/g" $gtkrc_file
    fi
    if [ "${iFlags[5]}" == "true" ]; then
        sed -i "s/\(.*text_color:#.[^:]*:\).[^\"]*/\1${base_color}/g" $gtkrc_file
    fi
    if [ "${iFlags[6]}" == "true" ]; then
        #FIXME:generate darker/lighter color if iFlags[6] is not set 
        sed -i "s/\(.*fg_color:#.[^:]*:\).[^\"]*/\1${lighter_bg_color}/g" $gtkrc_file
    fi
    if [ "${iFlags[8]}" == "true" ]; then
        sed -i "s/\(.*titlebar_fg_color:#.[^:]*:\).[^\"]*/\1${tb_bg_color}/g" $gtkrc_file
    fi
    if [ "${iFlags[9]}" == "true" ]; then
        sed -i "s/\(.*titlebar_fg_color:\).[^\]*\(.[^\"]*\"\)/\1${tb_fg_color}\2/g" $gtkrc_file
    fi
    if [ "${iFlags[10]}" == "true" ]; then
        sed -i "s/\(.*selected_fg_color:\).[^\]*\(.[^\"]*\"\)/\1${sfg_color}\2/g" $gtkrc_file
    fi
    if [ "${iFlags[11]}" == "true" ]; then
        sed -i "s/\(.*selected_fg_color:#.[^:]*:\).[^\"]*/\1${sbg_color}/g" $gtkrc_file
    fi
}
########################### END Materia Customization Functions #########################

########################## START Parsing, Rendering & Installation Flow Control #############################
# Arraies of flags to control the installation and rendering assets
iFlags=('false' 'false'  'false' 'false' 'false' \      # installation flags 
        'false' 'false'  'false' 'false' 'false' \
        'false' 'false'  'false' 'false' 'false')
aFlags=('false' 'false'  'false' 'false' 'false' \      # assets flags
        'false' 'false'  'false' 'false' 'false' \ 
        'false' 'false'  'false' 'false' 'false' \ 
        'false')
rFlags=('false' 'false')                                 # rendering flag 

OPTS=$(getopt -o c:s:n:d: -l color:,size:,name:,assets:, render-assets,\
    gtk2,gtk3,fg:,fg-dark:,fg2:,fg2-dark:,fg2-disabled:,fg2-dark-disabled:,\
    bg:,bg-dark:,bg-lighter:,bg-lighter-dark:,base:,base-dark:,primary:,\
    divider:,accent:,dest:,bg2:,bg3:,tbg:,tfg:,sfg:,sbg: -n $0 -- "$@")
if [ $? -ne 0 ]; then
    echo "Failed parsing options, Try '$0 --help' for more info"
    exit 1
fi
if [ "${1}" == "install" ]; then
    shift
    while [ $# -gt 0 ] && [ "$1" != "--" ]; do 
        case "$1" in
            -c|--color)
                color="-${2}"
                is_valid_variant "${color}" 
                iFlags[0]='true'
                shift 2
                ;;
            -s|--size)
                size="-${2}"
                is_valid_size "${size}" 
                iFlags[1]='true'
                shift 2
                ;;
            -n|--name)
                new_theme_name="${2}"
                iFlags[2]='true'
                shift 2
                ;;
            --fg) 
                is_valid_color "${1}" "${2}"
                fg_color="${2}"
                iFlags[4]='true'
                shift 2
                ;;
            --bg)
                is_valid_color "${1}" "${2}"
                base_color="${2}"
                iFlags[5]='true'
                shift 2
                ;;
            --bg2)
                is_valid_color "${1}" "${2}"
                lighter_bg_color="${2}"
                iFlags[6]='true'
                shift 2
                ;;
            --bg3)
                is_valid_color "${1}" "${2}"
                bg_color="${2}"
                iFlags[7]='true'
                shift 2
                ;;
            --tbg)
                is_valid_color "${1}" "${2}"
                tb_bg_color="${2}"
                iFlags[8]='true'
                shift 2
                ;;
            --tfg)
                is_valid_color "${1}" "${2}"
                tb_fg_color="${2}"
                iFlags[9]='true'
                shift 2
                ;;
            --sfg)
                is_valid_color "${1}" "${2}"
                sfg_color="${2}"
                iFlags[10]='true'
                shift 2
                ;;
            --sbg)
                is_valid_color "${1}" "${2}"
                sbg_color="${2}"
                iFlags[11]='true'
                shift 2
                ;;
            --accent)
                is_valid_color "${1}" "${2}"
                accent_color="${2}"
                iFlags[12]='true'
                shift 2
                ;;
            --btn-fg)
                is_valid_color "${1}" "${2}"
                btn_fg_color="${2}"
                iFlags[13]='true'
                shift 2
                ;;
            -d|--dest)
                #TODO: prompt the user to run as root when outside $HOME 
                theme_dst_dir="${2}"
                if [ ! -d "${theme_dst_dir}" ]; then
                    echo "ERROR: destination directory does not exist."
                    exit 1
                fi
                iFlags[3]='true'
                shift 2
                ;;
            -h|--help)
                usage
                shift 2
                exit 1
                ;;
            *)
                echo "ERROR: Unrecognized installation option '$1'."
                echo "Try '$0 --help' for more information"
                exit 1
                ;;
        esac
    done
    if [[ "${iFlags[@]:4}" =~ "true" && "${iFlags[0]}" = "true" ]]; then
        change_colors_scss 
    elif [[ "${iFlags[@]:4}" =~ "true" && "${iFlags[0]}" = "false" ]]; then
        echo "ERROR: Please specify color variant [light|dark]."
        echo "Try '$0 --help' for more information"
        exit 1
    fi
    if [ "${iFlags[3]}" == "false" ]; then
        echo "Please run as root." 
        exit 1
    fi
    set_theme_variant "${color}" "${size}"
    install_materia  ${theme_dst_dir}
    echo
elif [ "${1}" == "assets" ]; then
    shift
    while [ $# -gt 0 ] && [ "$1" != "--" ]; do
        case "$1" in 
            --fg)
                is_valid_color "${1}" "${2}"
                color_fg=${2:-"#000000"}
                old_color_fg=
                aFlags[0]='true'
                shift 2
                ;;
            --fg-dark)
                is_valid_color "${1}" "${2}"
                color_fg_dark=${2:-"#FFFFFF"}
                aFlags[1]='true'
                shift 2
                ;;
            --bg)
                is_valid_color "${1}" "${2}"
                color_bg=${2:-"#F5F5F5"}
                aFlags[2]='true'
                shift 2
                ;;
            --bg-dark)
                is_valid_color "${1}" "${2}"
                color_bg_dark=${2:-"#333E43"}
                aFlags[3]='true'
                shift 2
                ;;
            --bg-lighter)
                is_valid_color "${1}" "${2}"
                color_bg_lighter=${2:-"#FAFAFA"}
                aFlags[4]='true'
                shift 2
                ;;
            --bg-lighter-dark)
                is_valid_color "${1}" "${2}"
                color_bg_lighter_dark=${2:-"#414F56"}
                aFlags[5]='true'
                shift 2
                ;;
            --base)
                is_valid_color "${1}" "${2}"
                color_base=${2:-"#FFFFFF"}
                aFlags[6]='true'
                shift 2
                ;;
            --base-dark)
                is_valid_color "${1}" "${2}"
                color_base_dark=${2:-"#3B484E"}
                aFlags[7]='true'
                shift 2
                ;;
            --accent)
                is_valid_color "${1}" "${2}"
                color_accent=${2:-"#FF4081"}
                aFlags[8]='true'
                shift 2
                ;;
            --primary)
                is_valid_color "${1}" "${2}"
                color_primary=${2:-"#42A5F5"}
                aFlags[9]='true'
                shift 2
                ;;
            *)
                echo "ERROR: Unrecognized assets option '$1'"
                exit 1
                ;; 
        esac
    done
    change_assets_color
elif [ "${1}" == "render-assets" ]; then
    shift
    while [ $# -ne 0 ] && [ "$1" != "--" ]; do
        case "$1" in
            --gtk2)
                render_assets "gtk2"
                rFlags[0]='true'
                shift 
                ;;
            --gtk3)
                render_assets "gtk3"
                rFlags[1]='true'
                shift
                ;;
            *)
                echo "ERROR: Unrecognized rendering option '$1'."
                echo "Try '$0 --help' for more information"
                exit 1
                ;; 
        esac
    done
    if [ "${rFlags[0]}" == "false" -a "${rFlags[1]}" == "false" ]; then
        render_assets "gtk2"
        render_assets "gtk3"
        printf "%s\n" "All assets has been rendered successfully."
    fi
elif [ "${1}" == "--help" -o "${1}" == "-h" ]; then
    usage
	exit 1
elif [ "${1}" == "--version" -o "${1}" == "-v" ]; then
    echo "${0} version 0.8"
	exit 1
else
    echo "ERROR: Unrecognized argument '${1}'."
    echo "Try '${0} --help' for more information."
	exit 1
fi
exit 0
